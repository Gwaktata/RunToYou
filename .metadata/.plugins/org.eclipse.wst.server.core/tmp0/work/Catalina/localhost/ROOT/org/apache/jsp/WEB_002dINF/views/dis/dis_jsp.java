/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2022-04-06 02:15:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.dis;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class dis_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("$(function(){\r\n");
      out.write("\t$(\"#searchWrd\").autocomplete({\r\n");
      out.write("\t\tsource : function( request, response ) {\r\n");
      out.write("             $.ajax({\r\n");
      out.write("                    type: 'get',\r\n");
      out.write("                    url: \"/dis/\" + $(\"#searchWrd\").val(),\r\n");
      out.write("                    success: function(data) {\r\n");
      out.write("                    \tconsole.log(data)\r\n");
      out.write("                        response(\r\n");
      out.write("                            $.map(data, function(item) {\t//json[i] 번째 에 있는게 item 임.\r\n");
      out.write("                                return {\r\n");
      out.write("                                    label: item.disNm,\t//UI 에서 보여지는 글자, 실제 검색어랑 비교 대상\r\n");
      out.write("                                    cd: item.disCd\r\n");
      out.write("                                }\r\n");
      out.write("                            })\r\n");
      out.write("                        );\r\n");
      out.write("                    }\r\n");
      out.write("               });\r\n");
      out.write("            },\t// source 는 자동 완성 대상\r\n");
      out.write("\t\tselect : function(event, ui) {\t//아이템 선택시\r\n");
      out.write("\t\t\t//여기다가 아이템 선택했을 때 function 쓰면 됨\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tfocus : function(event, ui) {\t//포커스 가면\r\n");
      out.write("\t\t\treturn false;//한글 에러 잡기용도로 사용됨\r\n");
      out.write("\t\t\tevent.preventDefault();\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tminLength: 1,// 최소 글자수\r\n");
      out.write("\t\tautoFocus: true, //첫번째 항목 자동 포커스 기본값 false\r\n");
      out.write("// \t\tclasses: {\t//잘 모르겠음\r\n");
      out.write("// \t\t    \"ui-autocomplete\": \"highlight\"\r\n");
      out.write("// \t\t},\r\n");
      out.write("\t\tdelay: 100,\t//검색창에 글자 써지고 나서 autocomplete 창 뜰 때 까지 딜레이 시간(ms)\r\n");
      out.write("// \t\tdisabled: true, //자동완성 기능 끄기\r\n");
      out.write("\t\tposition: { my : \"left top\", at: \"left bottom\" },\t//잘 모르겠음\r\n");
      out.write("\t\tclose : function(event){\t//자동완성창 닫아질때 호출\r\n");
      out.write("\t\t\t$(\"#ui-id-2\").empty();\r\n");
      out.write("\t\t\t$(\".ui-helper-hidden-accessible\").empty();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t//( \"instance\" )\r\n");
      out.write("\t}).data(\"ui-autocomplete\")._renderItem = function( ul, item ) {    //요 부분이 UI를 마음대로 변경하는 부분\r\n");
      out.write("\t\t\treturn $( \"<li>\" )\t//기본 tag가 li로 되어 있음 \r\n");
      out.write("\t        .append( \"<div>\" + item.cd + \"<br>\" + item.label + \"</div>\" )\t//여기에다가 원하는 모양의 HTML을 만들면 UI가 원하는 모양으로 변함.\r\n");
      out.write("\t        .appendTo( ul );\r\n");
      out.write(" \t};\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("function jqueryLoading () {\r\n");
      out.write("//     \t$('html').loading({stoppable: true}); //아무데나 누르면 로딩 끝나게하는거\r\n");
      out.write("    \t$('html').loading('start');\r\n");
      out.write("//     \t$('html').loading('stop');\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("<style>\r\n");
      out.write(".hide {\r\n");
      out.write("  \tdisplay: none !important;\t/* 사용자가 아무것도 입력하지 않았을 때 검색창을 숨기는 용도*/\r\n");
      out.write("}\r\n");
      out.write(".rel_search {\r\n");
      out.write("\tdisplay:flex;\r\n");
      out.write("\tflex-direction:column;\r\n");
      out.write("/* \tjustify-content : space-around; */\r\n");
      out.write("\tborder-radius: 12px;\r\n");
      out.write("\tbackground: #f5f7fd;\r\n");
      out.write("\tz-index: 10;\r\n");
      out.write("}\r\n");
      out.write(".pop_rel_keywords {\r\n");
      out.write("  list-style: none;\r\n");
      out.write("  margin-right: 30%;\r\n");
      out.write("}\r\n");
      out.write(".pop_rel_keywords > li {\t/* JS에서 동적으로 li를 생성할 때 적용될 스타일*/\r\n");
      out.write("  line-height : 250%\r\n");
      out.write("}\r\n");
      out.write(".ui-autocomplete{\r\n");
      out.write("    max-width: 700px;\r\n");
      out.write("    max-height: 300px;\r\n");
      out.write("    overflow-y: auto;\r\n");
      out.write("    /* prevent horizontal scrollbar */\r\n");
      out.write("    overflow-x: hidden;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("\t<div>\r\n");
      out.write("\t\t<input id=\"searchWrd\" type=\"text\"/>\r\n");
      out.write("\t\t<button id=\"btn-search\" type=\"button\">검색</button>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<button onclick=\"jqueryLoading();\">시작</button>\r\n");
      out.write("</div>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
