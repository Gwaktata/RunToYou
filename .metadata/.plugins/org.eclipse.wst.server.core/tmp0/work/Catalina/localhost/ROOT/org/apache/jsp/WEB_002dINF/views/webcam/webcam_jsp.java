/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2022-04-01 00:32:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.webcam;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class webcam_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\" src=\"/resources/js/html2canvas.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("var csrfParameter = $(\"meta[name=_csrf_parameter]\").attr(\"content\");\r\n");
      out.write("var csrfHeader = $(\"meta[name=_csrf_header]\").attr(\"content\");\r\n");
      out.write("var csrfToken = $(\"meta[name=_csrf]\").attr(\"content\");\r\n");
      out.write("\r\n");
      out.write("//스냅샷 리스트\r\n");
      out.write("var snapList = [];\r\n");
      out.write("function partShot() {\r\n");
      out.write("\t//특정부분 스크린샷\r\n");
      out.write("\thtml2canvas(document.getElementById(\"mirrored\"))\r\n");
      out.write("\t//id container 부분만 스크린샷\r\n");
      out.write("\t.then(function (canvas) {\r\n");
      out.write("\t\t//찍을때마다 리스트에 보관\r\n");
      out.write("\t\tsnapList.push(canvas);\r\n");
      out.write("\t\t//jpg 결과값\r\n");
      out.write("\t\tdrawImg(canvas.toDataURL('image/jpeg'));\r\n");
      out.write("\t\t//이미지 저장\r\n");
      out.write("\t\t//이미지 이름을 환자코드 + 날짜 + 순번 .jpg 이런식으로 하면 될듯\r\n");
      out.write("// \t\tsaveAs(canvas.toDataURL(), 'file-name.jpg');\r\n");
      out.write("\t}).catch(function (err) {\r\n");
      out.write("\t\tconsole.log(err);\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function drawImg(imgData) {\r\n");
      out.write("\t  return new Promise(function reslove() {\r\n");
      out.write("\t\t  var captureBody = document.querySelector(\"#captureBody\");\r\n");
      out.write("\t\t  \r\n");
      out.write("\t\t  //내가 결과 값을 그릴 canvas 부분 설정\r\n");
      out.write("\t\t  var canvas = document.getElementById('mirrored');\r\n");
      out.write("\t\t  var ctx = canvas.getContext('2d');\r\n");
      out.write("\t\t  //canvas의 뿌려진 부분 초기화\r\n");
      out.write("\t\t  ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n");
      out.write("\t\t  \r\n");
      out.write("\t\t  var imageObj = new Image();\r\n");
      out.write("\t\t  imageObj.onload = function () {\r\n");
      out.write("\t\t\t  ctx.drawImage(imageObj, 0, 0,canvas.width,canvas.height);\r\n");
      out.write("\t\t\t  //canvas img를 그리겠다.\r\n");
      out.write("\t\t  };\r\n");
      out.write("\t\t  imageObj.src = imgData;\r\n");
      out.write("\t\t  imageObj.className = \"snapImag\";\r\n");
      out.write("\t\t  //그릴 image데이터를 넣어준다.\r\n");
      out.write("\t\t  captureBody.appendChild(imageObj);\r\n");
      out.write("\t\r\n");
      out.write("\t  }, function reject() { \r\n");
      out.write("\t  \t\t\r\n");
      out.write("\t  });\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//사진 다운로드\r\n");
      out.write("function savePic(){\r\n");
      out.write("\tvar list = [];\r\n");
      out.write("\tvar today = new Date();\r\n");
      out.write("\tvar year = today.getFullYear(); \r\n");
      out.write("\tvar month = today.getMonth() + 1; \r\n");
      out.write("\tvar date = today.getDate();\r\n");
      out.write("\r\n");
      out.write("\tvar dayInfo = `${year}${month >= 10 ? month : '0' + month}${date >= 10 ? date : '0' + date}`\r\n");
      out.write("\t\r\n");
      out.write("\tfor(var i = 0; i < snapList.length; i++){\r\n");
      out.write("\t\tvar map = {\r\n");
      out.write("\t\t\t\t\"uri\":snapList[i].toDataURL('image/jpeg')\r\n");
      out.write("\t\t\t\t,\"fileNm\": i+1 + \"_\" + dayInfo + \"_PNT00001.jpg\"\r\n");
      out.write("\t\t\t\t,\"pntCd\": \"PNT00001\"\r\n");
      out.write("\t\t\t\t,\"treatCd\": \"TRT00001\"\r\n");
      out.write("\t\t\t\t,\"fileNo\": i+1\r\n");
      out.write("\t\t\t\t,\"empCd\": \"EMP00001\"\r\n");
      out.write("\t\t\t\t,\"fileCls\": \"환부사진\"\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\tlist.push(map);\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("\t\turl: '/downloadSnapImg',\r\n");
      out.write("\t\ttype: 'post',\r\n");
      out.write("\t\tdata: JSON.stringify(list),\r\n");
      out.write("\t\tcontentType: 'application/json',\r\n");
      out.write("\t\tbeforeSend : function(xhr){   /*데이터를 전송하기 전에 헤더에 csrf값을 설정한다*/\r\n");
      out.write("\t\t\txhr.setRequestHeader(csrfHeader, csrfToken);\r\n");
      out.write("        },\r\n");
      out.write("\t\tsuccess: function(data){\r\n");
      out.write("\t\t\tif(data){\r\n");
      out.write("\t\t\t\talert(\"저장완료\");\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t})\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//사진 눌러서 삭제\r\n");
      out.write("$(document).on(\"click\",\".snapImag\",function(){\r\n");
      out.write("\tfor(var i = 0; i < snapList.length; i++){\r\n");
      out.write("\t\tvar src = snapList[i].toDataURL('image/jpeg');\r\n");
      out.write("\t\tif(src == this.src){\r\n");
      out.write("\t\t\tsnapList.splice(i, 1);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\t$(this).remove();\r\n");
      out.write("})\r\n");
      out.write("\t \r\n");
      out.write("// 캠 찍어서 좌우반전 canvas에 뿌리기\r\n");
      out.write("document.addEventListener(\"DOMContentLoaded\", () => {\r\n");
      out.write("\t  new App();\r\n");
      out.write("})\r\n");
      out.write("\r\n");
      out.write("class App {\r\n");
      out.write("  constructor() {\r\n");
      out.write("    const video = document.querySelector(\"#videoElement\");\r\n");
      out.write("\r\n");
      out.write("    if (navigator.mediaDevices.getUserMedia) {\r\n");
      out.write("      navigator.mediaDevices.getUserMedia({ video: true })\r\n");
      out.write("        .then( (stream) => { // function 의 this와 화살표 함수의 this 가 다름\r\n");
      out.write("          video.srcObject = stream;\r\n");
      out.write("        })\r\n");
      out.write("        .catch(function (error) {\r\n");
      out.write("          console.log(\"Something went wrong!\");\r\n");
      out.write("          console.log(error);\r\n");
      out.write("          return;\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    video.addEventListener( \"loadedmetadata\", () => {\r\n");
      out.write("      window.requestAnimationFrame(this.draw.bind(this));\r\n");
      out.write("    });\r\n");
      out.write("  }\r\n");
      out.write("  \r\n");
      out.write("  draw(t) {\r\n");
      out.write("    window.requestAnimationFrame(this.draw.bind(this));\r\n");
      out.write("    \r\n");
      out.write("    const canvas = document.querySelector(\"#mirrored\");\r\n");
      out.write("    const video = document.querySelector(\"#videoElement\");\r\n");
      out.write("    canvas.width = video.videoWidth;\r\n");
      out.write("    canvas.height = video.videoHeight;\r\n");
      out.write("\r\n");
      out.write("    const ctx = canvas.getContext('2d');\r\n");
      out.write("    ctx.translate(video.videoWidth, 0);\r\n");
      out.write("    ctx.scale(-1,1);\r\n");
      out.write("    ctx.drawImage(video, 0, 0, \r\n");
      out.write("    \tvideo.videoWidth, \r\n");
      out.write("        video.videoHeight);  \r\n");
      out.write("  }\r\n");
      out.write("  \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("$(function(){\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("\t\turl: '/snapLog',\r\n");
      out.write("\t\ttype: 'get',\r\n");
      out.write("\t\tdata: {\"treatCd\": \"TRT00001\",\r\n");
      out.write("\t\t\t   \"pntCd\": \"PNT00001\"},\r\n");
      out.write("\t\tdataType : \"html\", \r\n");
      out.write("\t\tsuccess: function(res){\r\n");
      out.write("\t\t\tvar html = $(\"<div>\").html(res);\r\n");
      out.write("\t\t\tvar contents = html.find(\"div#snapLog\").html();\r\n");
      out.write("\t\t\t$(\"#snapLog\").html(contents);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t})\r\n");
      out.write("})\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("#videoElement, #mirrored{\r\n");
      out.write("\twidth: 300px;\r\n");
      out.write("\theight: 200px;\r\n");
      out.write("\tbackground-color: #666;\r\n");
      out.write("  \tdisplay: inline-block;\r\n");
      out.write("}\r\n");
      out.write("#videoElement{\r\n");
      out.write("\tdisplay: none;\r\n");
      out.write("}\r\n");
      out.write("#captureBody, #snapLog{\r\n");
      out.write("\tdisplay: flex;\r\n");
      out.write("\tjustify-content: flex-start;\r\n");
      out.write("\talign-content: flex-start;\r\n");
      out.write("\tbackground-color: #666;\r\n");
      out.write("\theight: 300px;\r\n");
      out.write("\tflex-wrap: wrap;\r\n");
      out.write("\toverflow-y: auto;\r\n");
      out.write("}\r\n");
      out.write("#captureBody img, #snapLog img{\r\n");
      out.write("\tmargin: 15px;\r\n");
      out.write("\twidth: 150px;\r\n");
      out.write("\theight: 100px;\r\n");
      out.write("\tcursor: pointer;\r\n");
      out.write("\tfilter: xray;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<video autoplay=\"true\" id=\"videoElement\"></video>\r\n");
      out.write("\t<canvas class=\"canvas\" id=\"mirrored\"></canvas>\r\n");
      out.write("\t<input type=button id=\"getPic\" onclick=\"partShot()\" value=\"촬영\">\r\n");
      out.write("\t<input type=button id=\"savePic\" onclick=\"savePic()\" value=\"저장\">\r\n");
      out.write("\t<div id=\"captureBody\"></div>\r\n");
      out.write("\t<div id=\"snapLog\"></div>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
